
STM32F446RE_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b94  08000b94  00010b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ba0  08000ba0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ba0  08000ba0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ba0  08000ba0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba0  08000ba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ba4  08000ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000bb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000bb4  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022ea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004f6  00000000  00000000  00022326  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000160  00000000  00000000  00022820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000128  00000000  00000000  00022980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000219f  00000000  00000000  00022aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000129a  00000000  00000000  00024c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000095ba  00000000  00000000  00025ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f49b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000504  00000000  00000000  0002f518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b7c 	.word	0x08000b7c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000b7c 	.word	0x08000b7c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <_SPI_GPIO_INITS>:
#include <stdint.h>
#include <string.h>


void _SPI_GPIO_INITS(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI_Pins;
	memset (&SPI_Pins, 0, sizeof(SPI_Pins));
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	220c      	movs	r2, #12
 800021e:	2100      	movs	r1, #0
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fca3 	bl	8000b6c <memset>
	SPI_Pins.pGPIOx = GPIOB;
 8000226:	4b14      	ldr	r3, [pc, #80]	; (8000278 <_SPI_GPIO_INITS+0x64>)
 8000228:	607b      	str	r3, [r7, #4]
	SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022a:	2302      	movs	r3, #2
 800022c:	727b      	strb	r3, [r7, #9]
	SPI_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800022e:	2305      	movs	r3, #5
 8000230:	737b      	strb	r3, [r7, #13]
	SPI_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000232:	2300      	movs	r3, #0
 8000234:	733b      	strb	r3, [r7, #12]
	SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000236:	2300      	movs	r3, #0
 8000238:	72fb      	strb	r3, [r7, #11]
	SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023a:	2302      	movs	r3, #2
 800023c:	72bb      	strb	r3, [r7, #10]
	
	// SCLK
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800023e:	230d      	movs	r3, #13
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 facf 	bl	80007e8 <GPIO_Init>

	// MOSI
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800024a:	230f      	movs	r3, #15
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fac9 	bl	80007e8 <GPIO_Init>

	// MISO
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000256:	230e      	movs	r3, #14
 8000258:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fac3 	bl	80007e8 <GPIO_Init>

	// NSS
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000262:	230c      	movs	r3, #12
 8000264:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fabd 	bl	80007e8 <GPIO_Init>
	
}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40020400 	.word	0x40020400

0800027c <_SPI2_INITS>:


void _SPI2_INITS(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2_Handle;

	SPI2_Handle.pSPIx = SPI2;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <_SPI2_INITS+0x40>)
 8000284:	603b      	str	r3, [r7, #0]
	SPI2_Handle.SPI_Config.BusConfig = SPI_BUS_CONFIG_FD;
 8000286:	2301      	movs	r3, #1
 8000288:	717b      	strb	r3, [r7, #5]
	SPI2_Handle.SPI_Config.DeviceMode = SPI_DEVICE_MODE_MASTER;
 800028a:	2301      	movs	r3, #1
 800028c:	713b      	strb	r3, [r7, #4]
	SPI2_Handle.SPI_Config.SclkSpeed = SPI_SLCK_SPEED_DIV2;
 800028e:	2300      	movs	r3, #0
 8000290:	71bb      	strb	r3, [r7, #6]
	SPI2_Handle.SPI_Config.DFF = SPI_DFF_8bit;
 8000292:	2300      	movs	r3, #0
 8000294:	71fb      	strb	r3, [r7, #7]
	SPI2_Handle.SPI_Config.CPAH = SPI_CPAH_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPI_Config.CPOL = SPI_CPOL_LOW;
 800029a:	2300      	movs	r3, #0
 800029c:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SSM = SPI_SSM_HW;
 800029e:	2301      	movs	r3, #1
 80002a0:	72bb      	strb	r3, [r7, #10]

	SPI_PeriClockControl(SPI2_Handle.pSPIx, ENABLE);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	2101      	movs	r1, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f866 	bl	8000378 <SPI_PeriClockControl>
	SPI_Init(&SPI2_Handle);
 80002ac:	463b      	mov	r3, r7
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 f8ee 	bl	8000490 <SPI_Init>
}
 80002b4:	bf00      	nop
 80002b6:	3720      	adds	r7, #32
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40003800 	.word	0x40003800

080002c0 <main>:


int main()
{	
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 80002c6:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <main+0x34>)
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80002cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Initializing peripherals
	SYSCFG_PeriClockControl(ENABLE);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 fa67 	bl	80007a4 <SYSCFG_PeriClockControl>

	// Initializing GPIOB to function mode 5
	_SPI_GPIO_INITS();
 80002d6:	f7ff ff9d 	bl	8000214 <_SPI_GPIO_INITS>

	// Initializing SPI2
	_SPI2_INITS();
 80002da:	f7ff ffcf 	bl	800027c <_SPI2_INITS>

	// Send data through SPI2
	SPI_SendData(SPI2,(uint8_t*) user_data, strlen(user_data));
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff8f 	bl	8000204 <strlen>
 80002e6:	4602      	mov	r2, r0
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	4802      	ldr	r0, [pc, #8]	; (80002f8 <main+0x38>)
 80002ee:	f000 f933 	bl	8000558 <SPI_SendData>
	
	while(1);
 80002f2:	e7fe      	b.n	80002f2 <main+0x32>
 80002f4:	08000b94 	.word	0x08000b94
 80002f8:	40003800 	.word	0x40003800

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490e      	ldr	r1, [pc, #56]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0b      	ldr	r4, [pc, #44]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000326:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 fbfb 	bl	8000b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffc7 	bl	80002c0 <main>

08000332 <LoopForever>:

LoopForever:
    b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000340:	08000ba8 	.word	0x08000ba8
  ldr r2, =_sbss
 8000344:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000348:	20000028 	.word	0x20000028

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>

0800034e <_SPI_Get_FlagStatus>:
/********************************************************************************************************************************************************
 * 																	APIs															  					*
 ********************************************************************************************************************************************************/
// Get flag status of TXE
uint8_t _SPI_Get_FlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & FlagName) return FLAG_SET;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	4013      	ands	r3, r2
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <_SPI_Get_FlagStatus+0x1a>
 8000364:	2301      	movs	r3, #1
 8000366:	e000      	b.n	800036a <_SPI_Get_FlagStatus+0x1c>
	else return FLAG_RESET;
 8000368:	2300      	movs	r3, #0
}
 800036a:	4618      	mov	r0, r3
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
	...

08000378 <SPI_PeriClockControl>:


// Peripheral Clock setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000384:	78fb      	ldrb	r3, [r7, #3]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d139      	bne.n	80003fe <SPI_PeriClockControl+0x86>
	{
		pSPIx->CR1 |= (1 << SPI_CRC1_SPE);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	601a      	str	r2, [r3, #0]
		if(pSPIx == SPI1)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SPI_PeriClockControl+0x104>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d108      	bne.n	80003b0 <SPI_PeriClockControl+0x38>
		{
			SPI1_PCLCK_EN();
 800039e:	4b38      	ldr	r3, [pc, #224]	; (8000480 <SPI_PeriClockControl+0x108>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003a4:	4b36      	ldr	r3, [pc, #216]	; (8000480 <SPI_PeriClockControl+0x108>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80003ac:	645a      	str	r2, [r3, #68]	; 0x44
        else if(pSPIx == SPI4)
		{
			SPI4_PCLCK_DI();
		}
	}
}
 80003ae:	e05f      	b.n	8000470 <SPI_PeriClockControl+0xf8>
		else if(pSPIx == SPI2)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a34      	ldr	r2, [pc, #208]	; (8000484 <SPI_PeriClockControl+0x10c>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d108      	bne.n	80003ca <SPI_PeriClockControl+0x52>
			SPI2_PCLCK_EN();
 80003b8:	4b31      	ldr	r3, [pc, #196]	; (8000480 <SPI_PeriClockControl+0x108>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003be:	4b30      	ldr	r3, [pc, #192]	; (8000480 <SPI_PeriClockControl+0x108>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80003c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80003c8:	e052      	b.n	8000470 <SPI_PeriClockControl+0xf8>
        else if(pSPIx == SPI3)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a2e      	ldr	r2, [pc, #184]	; (8000488 <SPI_PeriClockControl+0x110>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d108      	bne.n	80003e4 <SPI_PeriClockControl+0x6c>
			SPI3_PCLCK_EN();
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <SPI_PeriClockControl+0x108>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003d8:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SPI_PeriClockControl+0x108>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80003e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80003e2:	e045      	b.n	8000470 <SPI_PeriClockControl+0xf8>
        else if(pSPIx == SPI4)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a29      	ldr	r2, [pc, #164]	; (800048c <SPI_PeriClockControl+0x114>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d141      	bne.n	8000470 <SPI_PeriClockControl+0xf8>
			SPI4_PCLCK_EN();
 80003ec:	4b24      	ldr	r3, [pc, #144]	; (8000480 <SPI_PeriClockControl+0x108>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003f2:	4b23      	ldr	r3, [pc, #140]	; (8000480 <SPI_PeriClockControl+0x108>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80003fa:	645a      	str	r2, [r3, #68]	; 0x44
}
 80003fc:	e038      	b.n	8000470 <SPI_PeriClockControl+0xf8>
		pSPIx->CR1 &= ~(1 << SPI_CRC1_SPE);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
		if(pSPIx == SPI1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a1b      	ldr	r2, [pc, #108]	; (800047c <SPI_PeriClockControl+0x104>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d108      	bne.n	8000424 <SPI_PeriClockControl+0xac>
			SPI1_PCLCK_DI();
 8000412:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <SPI_PeriClockControl+0x108>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <SPI_PeriClockControl+0x108>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000420:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000422:	e025      	b.n	8000470 <SPI_PeriClockControl+0xf8>
		else if(pSPIx == SPI2)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a17      	ldr	r2, [pc, #92]	; (8000484 <SPI_PeriClockControl+0x10c>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d108      	bne.n	800043e <SPI_PeriClockControl+0xc6>
			SPI2_PCLCK_DI();
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <SPI_PeriClockControl+0x108>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000432:	4b13      	ldr	r3, [pc, #76]	; (8000480 <SPI_PeriClockControl+0x108>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800043a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800043c:	e018      	b.n	8000470 <SPI_PeriClockControl+0xf8>
        else if(pSPIx == SPI3)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a11      	ldr	r2, [pc, #68]	; (8000488 <SPI_PeriClockControl+0x110>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d108      	bne.n	8000458 <SPI_PeriClockControl+0xe0>
			SPI3_PCLCK_DI();
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <SPI_PeriClockControl+0x108>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <SPI_PeriClockControl+0x108>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000454:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000456:	e00b      	b.n	8000470 <SPI_PeriClockControl+0xf8>
        else if(pSPIx == SPI4)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a0c      	ldr	r2, [pc, #48]	; (800048c <SPI_PeriClockControl+0x114>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d107      	bne.n	8000470 <SPI_PeriClockControl+0xf8>
			SPI4_PCLCK_DI();
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <SPI_PeriClockControl+0x108>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <SPI_PeriClockControl+0x108>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800046e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40013000 	.word	0x40013000
 8000480:	20000000 	.word	0x20000000
 8000484:	40003800 	.word	0x40003800
 8000488:	40003c00 	.word	0x40003c00
 800048c:	40013400 	.word	0x40013400

08000490 <SPI_Init>:


// Init and De-Init
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
	tempreg |= pSPIHandle->SPI_Config.DeviceMode << SPI_CRC1_MSTR;										// Master or Slave.
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]
	if( pSPIHandle->SPI_Config.BusConfig == SPI_BUS_CONFIG_FD)  										// Selects the bus mode (Full DUPLEX, half DUPLEX, SIMPLEX)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	795b      	ldrb	r3, [r3, #5]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d104      	bne.n	80004bc <SPI_Init+0x2c>
	{
		// bidi should be clear
		tempreg &= ~(1<<SPI_CRC1_BIDIMODE);
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	e014      	b.n	80004e6 <SPI_Init+0x56>
	}
	else if (pSPIHandle->SPI_Config.BusConfig == SPI_BUS_CONFIG_HD)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	795b      	ldrb	r3, [r3, #5]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d104      	bne.n	80004ce <SPI_Init+0x3e>
	{
		// bidi should be set
		tempreg |= (1<<SPI_CRC1_BIDIMODE);
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	e00b      	b.n	80004e6 <SPI_Init+0x56>
	}
	else if (pSPIHandle->SPI_Config.BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	795b      	ldrb	r3, [r3, #5]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d107      	bne.n	80004e6 <SPI_Init+0x56>
	{
		// Bidi should be clear
		tempreg &= ~(1<<SPI_CRC1_BIDIMODE);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004dc:	60fb      	str	r3, [r7, #12]
		// RXMode should be set
		tempreg |= (1<<SPI_CRC1_RXONLY);
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e4:	60fb      	str	r3, [r7, #12]
	}
	if (pSPIHandle->SPI_Config.BusConfig < SPI_BUS_CONFIG_MULTIBUS) tempreg |= (1 << SPI_CRC1_SSI);		// Enables or Disable the SSI, SSI disabled only when multibus is required
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	795b      	ldrb	r3, [r3, #5]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d804      	bhi.n	80004f8 <SPI_Init+0x68>
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	e003      	b.n	8000500 <SPI_Init+0x70>
	else tempreg &= ~(1 << SPI_CRC1_SSI);
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004fe:	60fb      	str	r3, [r7, #12]
	tempreg |= pSPIHandle->SPI_Config.SclkSpeed << SPI_CRC1_BR;											// Selects the speed
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	461a      	mov	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4313      	orrs	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
	tempreg |= pSPIHandle->SPI_Config.DFF << SPI_CRC1_DFF;												// Data Frame format
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	79db      	ldrb	r3, [r3, #7]
 8000512:	02db      	lsls	r3, r3, #11
 8000514:	461a      	mov	r2, r3
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	4313      	orrs	r3, r2
 800051a:	60fb      	str	r3, [r7, #12]
	tempreg |= pSPIHandle->SPI_Config.CPAH << SPI_CRC1_CPAH;											// Clock phase
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	7a1b      	ldrb	r3, [r3, #8]
 8000520:	461a      	mov	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	4313      	orrs	r3, r2
 8000526:	60fb      	str	r3, [r7, #12]
	tempreg |= pSPIHandle->SPI_Config.CPOL << SPI_CRC1_CPOL;											// Clock polarity
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7a5b      	ldrb	r3, [r3, #9]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4313      	orrs	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
	tempreg |= pSPIHandle->SPI_Config.SSM << SPI_CRC1_SSM;												// Software slave management
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7a9b      	ldrb	r3, [r3, #10]
 800053a:	025b      	lsls	r3, r3, #9
 800053c:	461a      	mov	r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4313      	orrs	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
	
	pSPIHandle -> pSPIx->CR1 = tempreg;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <SPI_SendData>:
}


// Data Send and Receive
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
	while (Len > 0)
 8000564:	e027      	b.n	80005b6 <SPI_SendData+0x5e>
	{
		while (_SPI_Get_FlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);							// Wait for the TXE Buffer
 8000566:	bf00      	nop
 8000568:	2102      	movs	r1, #2
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f7ff feef 	bl	800034e <_SPI_Get_FlagStatus>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0f8      	beq.n	8000568 <SPI_SendData+0x10>
		if (pSPIx->CR1 & (1<< SPI_CRC1_DFF))													// If '1' the Data Frame format is 16 bits
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00e      	beq.n	80005a0 <SPI_SendData+0x48>
		{
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	60da      	str	r2, [r3, #12]
			Len --;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3b01      	subs	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
			Len --;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3b01      	subs	r3, #1
 8000596:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3301      	adds	r3, #1
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	e00a      	b.n	80005b6 <SPI_SendData+0x5e>
		}
		else																					// Data frame format is 8bit
		{
			pSPIx->DR = *pTxBuffer;
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	60da      	str	r2, [r3, #12]
			Len --;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60bb      	str	r3, [r7, #8]
	while (Len > 0)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1d4      	bne.n	8000566 <SPI_SendData+0xe>
		}	
	}
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <GPIO_PeriClockControl>:

/**********************************************************************************************************************************************************************
 * 																	APIs															  								  *
 **********************************************************************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d167      	bne.n	80006a6 <GPIO_PeriClockControl+0xe2>
	{
		if(pGPIOx == GPIOA)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a69      	ldr	r2, [pc, #420]	; (8000780 <GPIO_PeriClockControl+0x1bc>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d108      	bne.n	80005f0 <GPIO_PeriClockControl+0x2c>
		{
			GPIOA_PCLCK_EN();
 80005de:	4b69      	ldr	r3, [pc, #420]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e4:	4b67      	ldr	r3, [pc, #412]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f042 0201 	orr.w	r2, r2, #1
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
		{
			GPIOH_PCLCK_DI();
		}
	}

}
 80005ee:	e0c1      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOB)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a65      	ldr	r2, [pc, #404]	; (8000788 <GPIO_PeriClockControl+0x1c4>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d108      	bne.n	800060a <GPIO_PeriClockControl+0x46>
			GPIOB_PCLCK_EN();
 80005f8:	4b62      	ldr	r3, [pc, #392]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fe:	4b61      	ldr	r3, [pc, #388]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f042 0202 	orr.w	r2, r2, #2
 8000606:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000608:	e0b4      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOC)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a5f      	ldr	r2, [pc, #380]	; (800078c <GPIO_PeriClockControl+0x1c8>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d108      	bne.n	8000624 <GPIO_PeriClockControl+0x60>
			GPIOC_PCLCK_EN();
 8000612:	4b5c      	ldr	r3, [pc, #368]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	4b5a      	ldr	r3, [pc, #360]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f042 0204 	orr.w	r2, r2, #4
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000622:	e0a7      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOD)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a5a      	ldr	r2, [pc, #360]	; (8000790 <GPIO_PeriClockControl+0x1cc>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d108      	bne.n	800063e <GPIO_PeriClockControl+0x7a>
			GPIOD_PCLCK_EN();
 800062c:	4b55      	ldr	r3, [pc, #340]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000632:	4b54      	ldr	r3, [pc, #336]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f042 0208 	orr.w	r2, r2, #8
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800063c:	e09a      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOE)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a54      	ldr	r2, [pc, #336]	; (8000794 <GPIO_PeriClockControl+0x1d0>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d108      	bne.n	8000658 <GPIO_PeriClockControl+0x94>
			GPIOE_PCLCK_EN();
 8000646:	4b4f      	ldr	r3, [pc, #316]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	4b4d      	ldr	r3, [pc, #308]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f042 0210 	orr.w	r2, r2, #16
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000656:	e08d      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOF)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a4f      	ldr	r2, [pc, #316]	; (8000798 <GPIO_PeriClockControl+0x1d4>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d108      	bne.n	8000672 <GPIO_PeriClockControl+0xae>
			GPIOF_PCLCK_EN();
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	4b47      	ldr	r3, [pc, #284]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f042 0220 	orr.w	r2, r2, #32
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000670:	e080      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOG)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a49      	ldr	r2, [pc, #292]	; (800079c <GPIO_PeriClockControl+0x1d8>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d108      	bne.n	800068c <GPIO_PeriClockControl+0xc8>
			GPIOG_PCLCK_EN();
 800067a:	4b42      	ldr	r3, [pc, #264]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000680:	4b40      	ldr	r3, [pc, #256]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
}
 800068a:	e073      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOH)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a44      	ldr	r2, [pc, #272]	; (80007a0 <GPIO_PeriClockControl+0x1dc>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d16f      	bne.n	8000774 <GPIO_PeriClockControl+0x1b0>
			GPIOH_PCLCK_EN();
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80006a4:	e066      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		if(pGPIOx == GPIOA)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a35      	ldr	r2, [pc, #212]	; (8000780 <GPIO_PeriClockControl+0x1bc>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d108      	bne.n	80006c0 <GPIO_PeriClockControl+0xfc>
			GPIOA_PCLCK_DI();
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f022 0201 	bic.w	r2, r2, #1
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80006be:	e059      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOB)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a31      	ldr	r2, [pc, #196]	; (8000788 <GPIO_PeriClockControl+0x1c4>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d108      	bne.n	80006da <GPIO_PeriClockControl+0x116>
			GPIOB_PCLCK_DI();
 80006c8:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f022 0202 	bic.w	r2, r2, #2
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80006d8:	e04c      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOC)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a2b      	ldr	r2, [pc, #172]	; (800078c <GPIO_PeriClockControl+0x1c8>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d108      	bne.n	80006f4 <GPIO_PeriClockControl+0x130>
			GPIOC_PCLCK_DI();
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f022 0204 	bic.w	r2, r2, #4
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80006f2:	e03f      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOD)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <GPIO_PeriClockControl+0x1cc>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d108      	bne.n	800070e <GPIO_PeriClockControl+0x14a>
			GPIOD_PCLCK_DI();
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f022 0208 	bic.w	r2, r2, #8
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800070c:	e032      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOE)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a20      	ldr	r2, [pc, #128]	; (8000794 <GPIO_PeriClockControl+0x1d0>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d108      	bne.n	8000728 <GPIO_PeriClockControl+0x164>
			GPIOE_PCLCK_DI();
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f022 0210 	bic.w	r2, r2, #16
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000726:	e025      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOF)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <GPIO_PeriClockControl+0x1d4>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d108      	bne.n	8000742 <GPIO_PeriClockControl+0x17e>
			GPIOF_PCLCK_DI();
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f022 0220 	bic.w	r2, r2, #32
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000740:	e018      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOG)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <GPIO_PeriClockControl+0x1d8>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d108      	bne.n	800075c <GPIO_PeriClockControl+0x198>
			GPIOG_PCLCK_DI();
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
}
 800075a:	e00b      	b.n	8000774 <GPIO_PeriClockControl+0x1b0>
		else if(pGPIOx == GPIOH)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <GPIO_PeriClockControl+0x1dc>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d107      	bne.n	8000774 <GPIO_PeriClockControl+0x1b0>
			GPIOH_PCLCK_DI();
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <GPIO_PeriClockControl+0x1c0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40020000 	.word	0x40020000
 8000784:	20000000 	.word	0x20000000
 8000788:	40020400 	.word	0x40020400
 800078c:	40020800 	.word	0x40020800
 8000790:	40020c00 	.word	0x40020c00
 8000794:	40021000 	.word	0x40021000
 8000798:	40021400 	.word	0x40021400
 800079c:	40021800 	.word	0x40021800
 80007a0:	40021c00 	.word	0x40021c00

080007a4 <SYSCFG_PeriClockControl>:


void SYSCFG_PeriClockControl(uint8_t EnorDi)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	if(EnorDi == ENABLE)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d108      	bne.n	80007c6 <SYSCFG_PeriClockControl+0x22>
	{
		SYSCFG_PCLCK_EN();
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <SYSCFG_PeriClockControl+0x40>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <SYSCFG_PeriClockControl+0x40>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007c2:	645a      	str	r2, [r3, #68]	; 0x44
	}else
	{
		SYSCFG_PCLCK_DI();
	}
}
 80007c4:	e007      	b.n	80007d6 <SYSCFG_PeriClockControl+0x32>
		SYSCFG_PCLCK_DI();
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <SYSCFG_PeriClockControl+0x40>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SYSCFG_PeriClockControl+0x40>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80007d4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000000 	.word	0x20000000

080007e8 <GPIO_Init>:


// Init and De-Init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
	// 1) Configure the mode of GPIO pin
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2101      	movs	r1, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fee2 	bl	80005c4 <GPIO_PeriClockControl>
	
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	795b      	ldrb	r3, [r3, #5]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d81f      	bhi.n	8000848 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); // Multiplied by 2 because the mode are selected by 2 bits
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	795b      	ldrb	r3, [r3, #5]
 800080c:	461a      	mov	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	791b      	ldrb	r3, [r3, #4]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber); 	// Clearing the mode
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	4619      	mov	r1, r3
 8000826:	2303      	movs	r3, #3
 8000828:	408b      	lsls	r3, r1
 800082a:	43db      	mvns	r3, r3
 800082c:	4619      	mov	r1, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	400a      	ands	r2, r1
 8000834:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;														// Setting the mode
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6819      	ldr	r1, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	430a      	orrs	r2, r1
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	e0c9      	b.n	80009dc <GPIO_Init+0x1f4>
	*											INTERRUPTION CONFIG																					   *
	****************************************************************************************************************************************************/
	else
	{
		// Configuring the Interruption mode pin
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	795b      	ldrb	r3, [r3, #5]
 800084c:	2b04      	cmp	r3, #4
 800084e:	d11b      	bne.n	8000888 <GPIO_Init+0xa0>
		{
			// 1. Configure the FTSR (Falling Trigger Selection Register)
			pEXTI->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000850:	4b49      	ldr	r3, [pc, #292]	; (8000978 <GPIO_Init+0x190>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	791b      	ldrb	r3, [r3, #4]
 800085a:	4619      	mov	r1, r3
 800085c:	2301      	movs	r3, #1
 800085e:	408b      	lsls	r3, r1
 8000860:	4619      	mov	r1, r3
 8000862:	4b45      	ldr	r3, [pc, #276]	; (8000978 <GPIO_Init+0x190>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	430a      	orrs	r2, r1
 8000868:	60da      	str	r2, [r3, #12]
			// Clear the corresponding RTST bit
			pEXTI->RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800086a:	4b43      	ldr	r3, [pc, #268]	; (8000978 <GPIO_Init+0x190>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	791b      	ldrb	r3, [r3, #4]
 8000874:	4619      	mov	r1, r3
 8000876:	2301      	movs	r3, #1
 8000878:	408b      	lsls	r3, r1
 800087a:	43db      	mvns	r3, r3
 800087c:	4619      	mov	r1, r3
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <GPIO_Init+0x190>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	400a      	ands	r2, r1
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	e03d      	b.n	8000904 <GPIO_Init+0x11c>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	795b      	ldrb	r3, [r3, #5]
 800088c:	2b05      	cmp	r3, #5
 800088e:	d11b      	bne.n	80008c8 <GPIO_Init+0xe0>
		{
			// 1. Configure the RTSR (Rising Trigger Selection Register)
			pEXTI->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000890:	4b39      	ldr	r3, [pc, #228]	; (8000978 <GPIO_Init+0x190>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	4619      	mov	r1, r3
 800089c:	2301      	movs	r3, #1
 800089e:	408b      	lsls	r3, r1
 80008a0:	4619      	mov	r1, r3
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <GPIO_Init+0x190>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	609a      	str	r2, [r3, #8]
			// Clear the corresponding RTST bit
			pEXTI->FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <GPIO_Init+0x190>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	4619      	mov	r1, r3
 80008b6:	2301      	movs	r3, #1
 80008b8:	408b      	lsls	r3, r1
 80008ba:	43db      	mvns	r3, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <GPIO_Init+0x190>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	400a      	ands	r2, r1
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	e01d      	b.n	8000904 <GPIO_Init+0x11c>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	d119      	bne.n	8000904 <GPIO_Init+0x11c>
		{
			// 1. Configure both RTSR and FTSR
			pEXTI->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <GPIO_Init+0x190>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68da      	ldr	r2, [r3, #12]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	4619      	mov	r1, r3
 80008dc:	2301      	movs	r3, #1
 80008de:	408b      	lsls	r3, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <GPIO_Init+0x190>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	430a      	orrs	r2, r1
 80008e8:	60da      	str	r2, [r3, #12]
			pEXTI->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <GPIO_Init+0x190>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	4619      	mov	r1, r3
 80008f6:	2301      	movs	r3, #1
 80008f8:	408b      	lsls	r3, r1
 80008fa:	4619      	mov	r1, r3
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <GPIO_Init+0x190>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	430a      	orrs	r2, r1
 8000902:	609a      	str	r2, [r3, #8]
		}
		
		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	089b      	lsrs	r3, r3, #2
 800090a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = EXTI_GPIO_IDENTIFICATOR(pGPIOHandle->pGPIOx);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <GPIO_Init+0x194>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d03b      	beq.n	8000998 <GPIO_Init+0x1b0>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a16      	ldr	r2, [pc, #88]	; (8000980 <GPIO_Init+0x198>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d024      	beq.n	8000974 <GPIO_Init+0x18c>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <GPIO_Init+0x19c>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d01d      	beq.n	8000970 <GPIO_Init+0x188>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <GPIO_Init+0x1a0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d016      	beq.n	800096c <GPIO_Init+0x184>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <GPIO_Init+0x1a4>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d00f      	beq.n	8000968 <GPIO_Init+0x180>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a10      	ldr	r2, [pc, #64]	; (8000990 <GPIO_Init+0x1a8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d008      	beq.n	8000964 <GPIO_Init+0x17c>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <GPIO_Init+0x1ac>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d101      	bne.n	8000960 <GPIO_Init+0x178>
 800095c:	2306      	movs	r3, #6
 800095e:	e01c      	b.n	800099a <GPIO_Init+0x1b2>
 8000960:	23ff      	movs	r3, #255	; 0xff
 8000962:	e01a      	b.n	800099a <GPIO_Init+0x1b2>
 8000964:	2305      	movs	r3, #5
 8000966:	e018      	b.n	800099a <GPIO_Init+0x1b2>
 8000968:	2304      	movs	r3, #4
 800096a:	e016      	b.n	800099a <GPIO_Init+0x1b2>
 800096c:	2303      	movs	r3, #3
 800096e:	e014      	b.n	800099a <GPIO_Init+0x1b2>
 8000970:	2302      	movs	r3, #2
 8000972:	e012      	b.n	800099a <GPIO_Init+0x1b2>
 8000974:	2301      	movs	r3, #1
 8000976:	e010      	b.n	800099a <GPIO_Init+0x1b2>
 8000978:	20000004 	.word	0x20000004
 800097c:	40020000 	.word	0x40020000
 8000980:	40020400 	.word	0x40020400
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40021000 	.word	0x40021000
 8000990:	40021400 	.word	0x40021400
 8000994:	40021800 	.word	0x40021800
 8000998:	2300      	movs	r3, #0
 800099a:	747b      	strb	r3, [r7, #17]
		pSYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);
 800099c:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <GPIO_Init+0x334>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	7cfa      	ldrb	r2, [r7, #19]
 80009a2:	3202      	adds	r2, #2
 80009a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009a8:	7c7a      	ldrb	r2, [r7, #17]
 80009aa:	7cbb      	ldrb	r3, [r7, #18]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <GPIO_Init+0x334>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	7cfa      	ldrb	r2, [r7, #19]
 80009ba:	4301      	orrs	r1, r0
 80009bc:	3202      	adds	r2, #2
 80009be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		
		// 3. Enable the exit interrupt delivery using IMR
		pEXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80009c2:	4b57      	ldr	r3, [pc, #348]	; (8000b20 <GPIO_Init+0x338>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	791b      	ldrb	r3, [r3, #4]
 80009cc:	4619      	mov	r1, r3
 80009ce:	2301      	movs	r3, #1
 80009d0:	408b      	lsls	r3, r1
 80009d2:	4619      	mov	r1, r3
 80009d4:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <GPIO_Init+0x338>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	430a      	orrs	r2, r1
 80009da:	601a      	str	r2, [r3, #0]
	}
	  
	temp=0;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
	// 2) Configure the Speed
	temp = (pGPIOHandle-> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	799b      	ldrb	r3, [r3, #6]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	791b      	ldrb	r3, [r3, #4]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEED &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber); 	// Clearing the mode
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	689a      	ldr	r2, [r3, #8]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	791b      	ldrb	r3, [r3, #4]
 80009fc:	4619      	mov	r1, r3
 80009fe:	2303      	movs	r3, #3
 8000a00:	408b      	lsls	r3, r1
 8000a02:	43db      	mvns	r3, r3
 8000a04:	4619      	mov	r1, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEED |= temp;													// Setting the mode
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6899      	ldr	r1, [r3, #8]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	609a      	str	r2, [r3, #8]
	
	temp = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
	// 3) Configure the PUPD settings
	temp = (pGPIOHandle-> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	79db      	ldrb	r3, [r3, #7]
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber); 	// Clearing the mode
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68da      	ldr	r2, [r3, #12]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	2303      	movs	r3, #3
 8000a42:	408b      	lsls	r3, r1
 8000a44:	43db      	mvns	r3, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;														// Setting the mode
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68d9      	ldr	r1, [r3, #12]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	60da      	str	r2, [r3, #12]
	
	temp = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
	// 4) Configure the OPTYPE
	temp = (pGPIOHandle-> GPIO_PinConfig.GPIO_PinOPType << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7a1b      	ldrb	r3, [r3, #8]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	791b      	ldrb	r3, [r3, #4]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber); 	// Clearing the mode
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	4619      	mov	r1, r3
 8000a82:	2301      	movs	r3, #1
 8000a84:	408b      	lsls	r3, r1
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	400a      	ands	r2, r1
 8000a90:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;													// Setting the mode
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6859      	ldr	r1, [r3, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	605a      	str	r2, [r3, #4]
	
	temp = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
	// 5) Configure the alternate functionality
	if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	795b      	ldrb	r3, [r3, #5]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d132      	bne.n	8000b14 <GPIO_Init+0x32c>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber / 8; 												// This will give the position for the Alternate[0/1]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	791b      	ldrb	r3, [r3, #4]
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber %8; 												// This will give the value of the postion of the 32 bits.
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	60bb      	str	r3, [r7, #8]
		pGPIOHandle -> pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));												//Clearing
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	3208      	adds	r2, #8
 8000aca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4011      	ands	r1, r2
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle -> pGPIOx->AFR[temp1] |= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	3208      	adds	r2, #8
 8000af2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7a5b      	ldrb	r3, [r3, #9]
 8000afa:	4619      	mov	r1, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4311      	orrs	r1, r2
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <__libc_init_array>:
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	4e0d      	ldr	r6, [pc, #52]	; (8000b5c <__libc_init_array+0x38>)
 8000b28:	4c0d      	ldr	r4, [pc, #52]	; (8000b60 <__libc_init_array+0x3c>)
 8000b2a:	1ba4      	subs	r4, r4, r6
 8000b2c:	10a4      	asrs	r4, r4, #2
 8000b2e:	2500      	movs	r5, #0
 8000b30:	42a5      	cmp	r5, r4
 8000b32:	d109      	bne.n	8000b48 <__libc_init_array+0x24>
 8000b34:	4e0b      	ldr	r6, [pc, #44]	; (8000b64 <__libc_init_array+0x40>)
 8000b36:	4c0c      	ldr	r4, [pc, #48]	; (8000b68 <__libc_init_array+0x44>)
 8000b38:	f000 f820 	bl	8000b7c <_init>
 8000b3c:	1ba4      	subs	r4, r4, r6
 8000b3e:	10a4      	asrs	r4, r4, #2
 8000b40:	2500      	movs	r5, #0
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	d105      	bne.n	8000b52 <__libc_init_array+0x2e>
 8000b46:	bd70      	pop	{r4, r5, r6, pc}
 8000b48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b4c:	4798      	blx	r3
 8000b4e:	3501      	adds	r5, #1
 8000b50:	e7ee      	b.n	8000b30 <__libc_init_array+0xc>
 8000b52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b56:	4798      	blx	r3
 8000b58:	3501      	adds	r5, #1
 8000b5a:	e7f2      	b.n	8000b42 <__libc_init_array+0x1e>
 8000b5c:	08000ba0 	.word	0x08000ba0
 8000b60:	08000ba0 	.word	0x08000ba0
 8000b64:	08000ba0 	.word	0x08000ba0
 8000b68:	08000ba4 	.word	0x08000ba4

08000b6c <memset>:
 8000b6c:	4402      	add	r2, r0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d100      	bne.n	8000b76 <memset+0xa>
 8000b74:	4770      	bx	lr
 8000b76:	f803 1b01 	strb.w	r1, [r3], #1
 8000b7a:	e7f9      	b.n	8000b70 <memset+0x4>

08000b7c <_init>:
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7e:	bf00      	nop
 8000b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b82:	bc08      	pop	{r3}
 8000b84:	469e      	mov	lr, r3
 8000b86:	4770      	bx	lr

08000b88 <_fini>:
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	bf00      	nop
 8000b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8e:	bc08      	pop	{r3}
 8000b90:	469e      	mov	lr, r3
 8000b92:	4770      	bx	lr
